{
  "compilerOptions": {
    // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    // "incremental":false,
    // 增量编译文件的存储位置
    // "tsBuildInfoFile": "./buildFile",
    // 打印诊断信息
    "diagnostics":true,
    // 编译语言的版本
    "target": "ESNext",
    // 生成代码的模板标准
    "module": "ESNext",
    // TS 需要引入的库，即声明文件，es5默认引用了dom、es5、scripthost,如需要使用es的高级版本特性，通常需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "lib": [
      "DOM",
      "ES2015",
      "ScriptHost",
      "ES2019.Array",
    ],
    // 允许编译器编译JS，JSX文件
    "allowJs":false,
    // 是否检测JavaScript语法
    "checkJs": false,
    // 指定输出目录
    "outDir":"./dist",
    // 指定输入文件目录(用于输入)，用于控制输出目录结构
    // "rootDir": "./src",
    // 生成声明文件，开启后会自动生成声明文件
    "declaration": false,
    // 声明文件存放目录
    // "declarationDir": "./file",
    // 只生成声明文件，而不会生成js文件
    // "emitDeclarationOnly": true,
    // 生成目标文件的sourceMap文件
    "sourceMap": false,
    // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
    "inlineSourceMap": false,
    // 为声明文件生成sourceMap
    // "declarationMap": true,
    // 声明文件目录，默认时node_modules/@types
    "typeRoots": ["node_modules/@types", "types"],
    // 加载的声明文件包
    "types": [],
    // 删除注释
    "removeComments": true,
    // 不输出文件，即编译后不会产生任何的JavaScript文件
    "noEmit": false,
    // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
    "downlevelIteration": true,
    // 开启所有严格模式的类型检查
    "strict": true,
    // 在代码中注入'use strict'
    "alwaysStrict": true,
    // 不允许隐式的any类型
    "noImplicitAny": false,
    // 不允许把null、undefined赋值给其他类型的变量
    "strictNullChecks": true,
    // 不允许函数参数双向协变
    "strictFunctionTypes": true,
    // 类的实例属性必须初始化
    "strictPropertyInitialization": true,
    // 严格的bind/call/apply检查
    "strictBindCallApply": true,
    // 不允许this有隐式的any类型
    "noImplicitThis": true,
    // 检查只声明、未使用的局部变量(只提示不报错)
    "noUnusedLocals": false,
    // 检查未使用的函数参数(只提示不报错)
    "noUnusedParameters": false,
    // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "noFallthroughCasesInSwitch": true,
    // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "moduleResolution": "node",
    // 解析非相对模块的基地址，默认是当前目录
    "baseUrl": "./",
    //
    "jsxFactory": "React.createElement",
    //
    "jsx": "preserve",
    // 路径映射，相对于baseUrl
    "paths": {
      // 如使用jquery时不想使用默认版本，需要手动指定版本，可进行如下配置
      "@jquery": [
        "node_modules/jquery/dist/jquery.min.js"
      ],
      "@/*": [
        "./src"
      ],
      "namespace/*": [
        "./namespace"
      ]
    },
    // 用于指定多个项目根目录的配置项，将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这些设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
    "rootDirs": ["./src", "./types", "./namespace"],
    // 打印输出文件
    "listEmittedFiles": true,
    // 打印编译后的文件
    "listFiles": false,
    // 装饰器的实验特性
    "experimentalDecorators": true,
    // 装饰器的声明触发某些类型的元数据的实验性支持
    "emitDecoratorMetadata": true
  },
  // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
   "include": [
     "src/**/*",
     "namespace/*",
     "types/*"
   ],
  // 指定一个排除列表（include的反向操作）
  // "exclude": [
  //   "demo.ts"
  // ],
  // 指定哪些文件使用该配置（属于手动一个个指定文件）
  // "files": [
  //   "demo.ts"
  // ],
  "ts-node": {
    // these options are overrides used only by ts-node
    // same as the --compilerOptions flag and the TS_NODE_COMPILER_OPTIONS environment variable
    "compilerOptions": {
      "module": "commonjs"
    }
  }
}

